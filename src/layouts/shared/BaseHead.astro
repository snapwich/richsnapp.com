---
import "styles/site.less";
import "styles/github-gist.css";
import type { ImageMetadata } from "astro";

import avatar from "../img/avatar.jpg";

interface Props {
  title?: string;
  description?: string;
  image?: ImageMetadata;
}

const { title, description, image } = Astro.props;
const headTitle = title ? `${title} - RichSnapp.com` : "RichSnapp.com";

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<meta charset="utf-8" />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1, minimum-scale=1.0, viewport-fit=cover"
/>
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<link rel="canonical" href={canonicalURL} />

<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Merriweather:300,400,700,400italic,700italic"
/>
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Barlow+Condensed:400,700,300,500"
/>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
/>

<title>{headTitle}</title>
<meta name="title" content={headTitle} />
<meta name="description" content={description} />

<meta property="og:type" content="website" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={headTitle} />
<meta property="og:description" content={description} />
<meta
  property="og:image"
  content={new URL(image ? image.src : avatar.src, Astro.url)}
/>

<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={headTitle} />
<meta property="twitter:description" content={description} />
<meta
  property="twitter:image"
  content={new URL(image ? image.src : avatar.src, Astro.url)}
/>

<script>
  // google analytics
  declare global {
    interface Window {
      dataLayer?: any[];
    }
  }

  try {
    if (localStorage.getItem("analytics") === "off") {
      console.info("analytics disabled");
    } else if (import.meta.env.PROD) {
      init();
    } else {
      console.info("analytics disabled in dev mode");
    }
  } catch (e) {}

  function init() {
    let tag = document.createElement("script");
    let scriptTags = document.getElementsByTagName("script")[0];
    tag.async = true;
    tag.src = "https://www.googletagmanager.com/gtag/js?id=G-FEZ9Y3YJWC";
    if (scriptTags && scriptTags.parentNode) {
      scriptTags.parentNode.insertBefore(tag, scriptTags);
    } else {
      console.error("error adding google analytics script");
    }

    window.dataLayer = window.dataLayer || [];

    function gtag(...args: any[]) {
      window.dataLayer!.push(args);
    }

    gtag("js", new Date());

    gtag("config", "G-FEZ9Y3YJWC");
  }
</script>
